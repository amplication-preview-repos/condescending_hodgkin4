/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Ap as PrismaAp } from "@prisma/client";

export class ApServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ApCountArgs, "select">): Promise<number> {
    return this.prisma.ap.count(args);
  }

  async aps<T extends Prisma.ApFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApFindManyArgs>
  ): Promise<PrismaAp[]> {
    return this.prisma.ap.findMany<Prisma.ApFindManyArgs>(args);
  }
  async ap<T extends Prisma.ApFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApFindUniqueArgs>
  ): Promise<PrismaAp | null> {
    return this.prisma.ap.findUnique(args);
  }
  async createAp<T extends Prisma.ApCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApCreateArgs>
  ): Promise<PrismaAp> {
    return this.prisma.ap.create<T>(args);
  }
  async updateAp<T extends Prisma.ApUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApUpdateArgs>
  ): Promise<PrismaAp> {
    return this.prisma.ap.update<T>(args);
  }
  async deleteAp<T extends Prisma.ApDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApDeleteArgs>
  ): Promise<PrismaAp> {
    return this.prisma.ap.delete(args);
  }
}
