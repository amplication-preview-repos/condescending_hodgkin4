/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApService } from "../ap.service";
import { ApCreateInput } from "./ApCreateInput";
import { Ap } from "./Ap";
import { ApFindManyArgs } from "./ApFindManyArgs";
import { ApWhereUniqueInput } from "./ApWhereUniqueInput";
import { ApUpdateInput } from "./ApUpdateInput";

export class ApControllerBase {
  constructor(protected readonly service: ApService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ap })
  async createAp(@common.Body() data: ApCreateInput): Promise<Ap> {
    return await this.service.createAp({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ap] })
  @ApiNestedQuery(ApFindManyArgs)
  async aps(@common.Req() request: Request): Promise<Ap[]> {
    const args = plainToClass(ApFindManyArgs, request.query);
    return this.service.aps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ap(@common.Param() params: ApWhereUniqueInput): Promise<Ap | null> {
    const result = await this.service.ap({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAp(
    @common.Param() params: ApWhereUniqueInput,
    @common.Body() data: ApUpdateInput
  ): Promise<Ap | null> {
    try {
      return await this.service.updateAp({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAp(
    @common.Param() params: ApWhereUniqueInput
  ): Promise<Ap | null> {
    try {
      return await this.service.deleteAp({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
